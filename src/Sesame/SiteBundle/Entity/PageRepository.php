<?php

namespace Sesame\SiteBundle\Entity;

// use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
// use Doctrine\ORM\Query;
// use Sesame\SiteBundle\Entity\Page;
// use Closure;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends NestedTreeRepository
{
/*
    public $onChildrenQuery;
    public function findAllParentChoises(Page $node = null)
    {
        $dql = "SELECT c FROM {$this->_entityName} c";
        if (!is_null($node))
        {
            $subSelect = "SELECT n FROM {$this->_entityName} n";
            $subSelect .= ' WHERE n.root = '.$node->getRoot();
            $subSelect .= ' AND n.lft BETWEEN '.$node->getLeft().' AND '.$node->getRight();
            $dql .= " WHERE c.id NOT IN ({$subSelect})";
        }
        $q = $this->_em->createQuery($dql);
        // $q->setHint(
            // Query::HINT_CUSTOM_OUTPUT_WALKER,
            // 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        // );
        $nodes = $q->getArrayResult();
        $indexed = array();
        foreach ($nodes as $node) {
            $indexed[$node['id']] = $node['title'];
        }
        return $indexed;
    }
    */
    /**
    * Will do reordering based on current translations
    */
    /*
    public function childrenQuery($node = null, $direct = false, $sortByField = null, $direction = 'ASC', $include = false)
    {
        $q = parent::childrenQuery($node, $direct, $sortByField, $direction, $include);
        if ($this->onChildrenQuery instanceof Closure)
        {
            $c = &$this->onChildrenQuery;
            $c($q);
        }
        return $q;
    }
    */
}

